



function [m_k x_k res] = IS_Resample22_Jacobian(frames,bdryPts,ctrlPts,sizes,Sigma_small,Sigma_big,Sigma_0,Sigma_1,dt,nofSteps,N)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%
% [m_k x_k res] = IS_Resample2(frames,bdryPts,ctrlPts,sizes,Sigma,Sigma_0,Sigma_1,dt,nofSteps,N)
%
% This program implements Importance Sampling + Resampling for two curves.
% 
% INPUT
%	frames	 - the sequence of images
% 	bdryPts	 - the boundaries of the particles
%	ctrlPts	 - the control points of the particles 
%       sizes    - the number of points in the outer contour
% 	Sigma_small- small sigma for covariance
% 	Sigma_0  - sigma for projection	
%	Sigma_1  - sigma for shape space	
%	dt       - time step size
%	nofSteps - number of steps in ODE
%	N - number of samples
%
% OUTPUT:
%	m_k - this is a (nofBdryPts,2,N,nofFrames) array which contains the sample of curves
%		representing the empirical estimate for the posterior at each time t
%	x_k - this is a (nofCtrlPts,2,N,nofFrames) array which contains the sample of ctrlPts
%      		at each time t
%       res - the structure with results
%
% USES: parObsL2.m updateSample2.m resample.m
%
% Note!!! This uses two kernels - small and big for the covariance of the vector field. If one wants to use just one kernel then Sigma_big should be passed as empty.
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%  global PAR
%  PAR.Sigma = Sigma;
%  PAR.Sigma_0 = Sigma_0;
%  PAR.Sigma_1 = Sigma_1;


% Setting input variables
res.input.frames = frames;
res.input.bdryPts = bdryPts;
res.input.ctrlPts = ctrlPts;
res.input.sizes = sizes;
res.input.Sigma_small = Sigma_small;
res.input.Sigma_big = Sigma_big;
res.input.Sigma_0 = Sigma_0;
res.input.Sigma_1 = Sigma_1;
res.input.dt = dt;
res.input.nofSteps = nofSteps;
res.input.N = N;

% Storing the stream
defaultStream = RandStream.getGlobalStream;
savedState = defaultStream.State;
res.rand = savedState;

% Some initial random variables
nofBdryPts = size(bdryPts,1);
nofCtrlPts = size(ctrlPts,1);
nofFrames = size(frames(:,:,1:end),3);

% observation likelihood parameters
par_obs = parObsL2(frames(:,:,1),bdryPts,sizes,50,50,'off');



% initializing the sample
m_k = zeros(nofBdryPts,2,N,nofFrames);
x_k = zeros(nofCtrlPts,2,N,nofFrames);
alpha_k = zeros(nofCtrlPts,2, N,nofFrames);
m_k(:,:,:,1) = reshape(repmat(bdryPts(:),1,N),nofBdryPts,2,N);
x_k(:,:,:,1) = reshape(repmat(ctrlPts(:),1,N),nofCtrlPts,2,N);

% initializing graphics
figure(1)
colormap('gray')
hold off

mu_k = zeros(nofCtrlPts,2,N);
mu_k = 0.1*randn(nofCtrlPts,2,N);


% Processing the frames
for it = 2:nofFrames
   
  disp(sprintf('Processing frame %d',it)) 
  mu_k = zeros(nofCtrlPts,2,N);
  
  tic
  % sample (the reparameterization in updateSample changes the location of bdryPts,ctrlPts)
  [m_k(:,:,:,it) x_k(:,:,:,it) w_k alpha_k(:,:,:,it-1)] = ...
	    updateSample2(frames(:,:,it),m_k(:,:,:,it-1),x_k(:,:,:,it-1),mu_k,sizes,Sigma_small,Sigma_big,Sigma_0,Sigma_1,dt,nofSteps,par_obs,'off');
  % resample
  [m_k(:,:,:,it) x_k(:,:,:,it) alpha_k(:,:,:,it-1) mu_k] = resample(m_k(:,:,:,it),x_k(:,:,:,it),alpha_k(:,:,:,it-1),mu_k,w_k);
  w_k = ones(N,1);
  w_k = w_k/sum(w_k)

  toc

  % visualization
  hold off
  imagesc(frames(:,:,it))
  hold on
  plot(squeeze(m_k(:,1,:,it)),squeeze(m_k(:,2,:,it)))
  plot(squeeze(x_k(:,1,:,it)),squeeze(x_k(:,2,:,it)),'o')
  pause(0.01)
  % pause()
end



% setting output variables
res.output.m_k = m_k;
res.output.x_k = x_k;
res.output.alpha_k = alpha_k;
